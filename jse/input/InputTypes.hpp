#ifndef JSE_INPUT_TYPES_H
#define JSE_INPUT_TYPES_H

namespace jse::input {

	enum InputDeviceType
	{
		IDT_Keyboard,
		IDT_Mouse,
		IDT_LastEnum
	};

	enum Key {
		Key_BackSpace,
		Key_Tab,
		Key_Clear,
		Key_Return,
		Key_Pause,
		Key_Escape,
		Key_Space,
		Key_Exclaim,
		Key_QuoteDouble,
		Key_Hash,
		Key_Dollar,
		Key_Ampersand,
		Key_Quote,
		Key_LeftParen,
		Key_RightParen,
		Key_Asterisk,
		Key_Plus,
		Key_Comma,
		Key_Minus,
		Key_Period,
		Key_Slash,
		Key_0,
		Key_1,
		Key_2,
		Key_3,
		Key_4,
		Key_5,
		Key_6,
		Key_7,
		Key_8,
		Key_9,
		Key_Colon,
		Key_SemiColon,
		Key_Less,
		Key_Equals,
		Key_Greater,
		Key_Question,
		Key_At,
		Key_LeftBracket,
		Key_BackSlash,
		Key_RightBracket,
		Key_Caret,
		Key_Underscore,
		Key_BackQuote,
		Key_A,
		Key_B,
		Key_C,
		Key_D,
		Key_E,
		Key_F,
		Key_G,
		Key_H,
		Key_I,
		Key_J,
		Key_K,
		Key_L,
		Key_M,
		Key_N,
		Key_O,
		Key_P,
		Key_Q,
		Key_R,
		Key_S,
		Key_T,
		Key_U,
		Key_V,
		Key_W,
		Key_X,
		Key_Y,
		Key_Z,
		Key_Delete,
		Key_KP_0,
		Key_KP_1,
		Key_KP_2,
		Key_KP_3,
		Key_KP_4,
		Key_KP_5,
		Key_KP_6,
		Key_KP_7,
		Key_KP_8,
		Key_KP_9,
		Key_KP_Period,
		Key_KP_Divide,
		Key_KP_Multiply,
		Key_KP_Minus,
		Key_KP_Plus,
		Key_KP_Enter,
		Key_KP_Equals,
		Key_Up,
		Key_Down,
		Key_Right,
		Key_Left,
		Key_Insert,
		Key_Home,
		Key_End,
		Key_PageUp,
		Key_PageDown,
		Key_F1,
		Key_F2,
		Key_F3,
		Key_F4,
		Key_F5,
		Key_F6,
		Key_F7,
		Key_F8,
		Key_F9,
		Key_F10,
		Key_F11,
		Key_F12,
		Key_F13,
		Key_F14,
		Key_F15,
		Key_NumLock,
		Key_CapsLock,
		Key_ScrollLock,
		Key_RightShift,
		Key_LeftShift,
		Key_RightCtrl,
		Key_LeftCtrl,
		Key_RightAlt,
		Key_LeftAlt,
		Key_RightMeta,
		Key_LeftMeta,
		Key_LeftSuper,
		Key_RightSuper,
		Key_Mode,
		Key_Help,
		Key_Print,
		Key_SysReq,
		Key_Break,
		Key_Menu,
		Key_Power,
		Key_Euro,
		Key_None,
		Key_World_0,
		Key_World_1,
		Key_World_2,
		Key_World_3,
		Key_World_4,
		Key_World_5,
		Key_World_6,
		Key_World_7,
		Key_World_8,
		Key_World_9,
		Key_World_10,
		Key_World_11,
		Key_World_12,
		Key_World_13,
		Key_World_14,
		Key_World_15,
		Key_World_16,
		Key_World_17,
		Key_World_18,
		Key_World_19,
		Key_World_20,
		Key_World_21,
		Key_World_22,
		Key_World_23,
		Key_World_24,
		Key_World_25,
		Key_World_26,
		Key_World_27,
		Key_World_28,
		Key_World_29,
		Key_World_30,
		Key_World_31,
		Key_World_32,
		Key_World_33,
		Key_World_34,
		Key_World_35,
		Key_World_36,
		Key_World_37,
		Key_World_38,
		Key_World_39,
		Key_World_40,
		Key_World_41,
		Key_World_42,
		Key_World_43,
		Key_World_44,
		Key_World_45,
		Key_World_46,
		Key_World_47,
		Key_World_48,
		Key_World_49,
		Key_World_50,
		Key_World_51,
		Key_World_52,
		Key_World_53,
		Key_World_54,
		Key_World_55,
		Key_World_56,
		Key_World_57,
		Key_World_58,
		Key_World_59,
		Key_World_60,
		Key_World_61,
		Key_World_62,
		Key_World_63,
		Key_World_64,
		Key_World_65,
		Key_World_66,
		Key_World_67,
		Key_World_68,
		Key_World_69,
		Key_World_70,
		Key_World_71,
		Key_World_72,
		Key_World_73,
		Key_World_74,
		Key_World_75,
		Key_World_76,
		Key_World_77,
		Key_World_78,
		Key_World_79,
		Key_World_80,
		Key_World_81,
		Key_World_82,
		Key_World_83,
		Key_World_84,
		Key_World_85,
		Key_World_86,
		Key_World_87,
		Key_World_88,
		Key_World_89,
		Key_World_90,
		Key_World_91,
		Key_World_92,
		Key_World_93,
		Key_World_94,
		Key_World_95,
		Key_LastEnum
	};

	enum MouseButton
	{
		MB_Left,
		MB_Middle,
		MB_Right,
		MB_WheelUp,
		MB_WheelDown,
		MB_LastEnum
	};

	enum KeyModifier {
		KeyModifier_None = 0x00000,
		KeyModifier_Ctrl = 0x00001,
		KeyModifier_Shift = 0x00002,
		KeyModifier_Alt = 0x00004,
		KeyModifier_LastEnum = 4
	};

	struct KeyPress
	{
		KeyPress() 
		{
			key = Key_LastEnum;
			unicode = 0;
			modifier = 0;
		}

		KeyPress(Key aKey, int aUnicode, int aModifier)
			: key(aKey), unicode(aUnicode), modifier(aModifier) {}

		Key key;
		int unicode;
		int modifier;
	};

}

#endif